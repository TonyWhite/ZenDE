#!/bin/bash
# Control Screen Brightness

# DEPENDENCIES
# bc (arbitrary precision calculator language)
# x11-xserver-utils (xrandr)
# zenity

MONITOR=(`xrandr | grep " connected" | cut -f1 -d " "`)
MONITOR=${MONITOR[0]}
PREV_BRIGHTNESS=""
BRIGHTNESS=""
WARNING_LOW="30"

function main()
{
  while true; do
    getBrightness
    PREV_BRIGHTNESS=${BRIGHTNESS}
    BRIGHTNESS=`zenity --window-icon="/usr/share/zen-de/brightness/zen-brightness.svg" --title="${TITLE}" --scale --text="${CHANGE_BRIGHTNESS}" --cancel-label="${EXIT}" --ok-label="${APPLY}" --value=${BRIGHTNESS}`
    if [[ $? == 0 ]]; then
      setBrightness
      if [[ "${BRIGHTNESS}" -lt "${WARNING_LOW}" && "${BRIGHTNESS}" -lt "${PREV_BRIGHTNESS}" ]]; then
        too_dark
      fi
    else
      break
    fi
  done
}

function too_dark()
{
  MESSAGE=${RESET_BRIGHTNESS_WITHIN}
  VALUE="100"
  UNIT="s"
  RESPONSE=`
  (
    while [ $VALUE -gt -1 ]
    do
      if [[ ${VALUE} == 100 ]]; then
        echo "99"
        echo "# ${MESSAGE} 10 ${UNIT}"
      else
        echo "${VALUE}"
        SECONDS="$[$VALUE+10]"
        if [[ "${#SECONDS}" -gt "2" ]]; then
          echo "# ${MESSAGE} ${SECONDS:0:2} ${UNIT}"
        else
          echo "# ${MESSAGE} ${SECONDS:0:1} ${UNIT}"  
        fi
      fi
      sleep 0.1
      VALUE=$[$VALUE-1]
    done
  ) |
  zenity --progress \
  --window-icon="/usr/share/zen-de/brightness/zen-brightness.svg" \
  --title="${TITLE}" \
  --text="" \
  --ok-label="..." \
  --extra-button="${OK}" \
  --auto-close`
  COUNTDOWN=$?
  if [[ "${RESPONSE}" != "${OK}" ]]; then
    BRIGHTNESS=${PREV_BRIGHTNESS}
    setBrightness
    if [[ "${COUNTDOWN}" == "0" ]]; then
      zenity --info --ellipsize --window-icon="/usr/share/zen-de/brightness/zen-brightness.svg" --title="${TITLE}" --text="${RESTORED_BRIGHTNESS}"
    fi
  fi
}

function getBrightness()
{
  BRIGHTNESS=`xrandr --verbose | grep -m 1 -i brightness | cut -f2 -d ' '`
  BRIGHTNESS=`echo "scale=0; ${BRIGHTNESS}*100/1" | bc -l`
}

function setBrightness()
{
  MAX="100"
  MIN="0"
  if [[ "${BRIGHTNESS}" -gt "${MAX}" ]]; then
    BRIGHTNESS=${MAX}
  fi
  if [[ "${BRIGHTNESS}" -lt "${MIN}" ]]; then
    BRIGHTNESS=${MIN}
  fi
  VAL=`echo "scale=2; ${BRIGHTNESS}/100" | bc -l`
  xrandr --output ${MONITOR} --brightness ${VAL}
}

function moreBrightness()
{
  if [[ ${BRIGHTNESS} == "" ]]; then
    getBrightness
  fi
  BRIGHTNESS=`echo "${BRIGHTNESS}+1" | bc -l`
  setBrightness
}

function lessBrightness()
{
  if [[ ${BRIGHTNESS} == "" ]]; then
    getBrightness
  fi
  BRIGHTNESS=`echo "${BRIGHTNESS}-1" | bc -l`
  setBrightness
}

# Search for icon path from current icon theme
# Example:
# get_icon_path "system-shutdown" "22"
function get_icon_path()
{
  ICON_NAME=$1
  ICON_SIZE=$2
  OLD_IFS=$IFS
  
  # Detect icon theme
  IFS=" "
  FETCHINFO=(`neofetch --stdout | grep -m 1 -i "^Icons" | cut -f2 -d ':' | xargs | cut -f1 -d ' '`)
  ICON_THEME_NAME=""
  for ((INDEX=0 ; INDEX < ${#FETCHINFO[@]}; INDEX++)); do
    if [[ ${#ICON_THEME_NAME} -gt 0 ]]; then
      ICON_THEME_NAME+=" "
    fi
    ICON_THEME_NAME+="${FETCHINFO[$INDEX]}"
  done
  
  # Detect iherits themes
  VALID_ICONS_PATH=()                                        # Array of valid icons path
  VALID_THEMES_FOLDERS=()                                    # Array of valid themes folders
  VALID_THEMES_NAMES=("${ICON_THEME_NAME}")                  # Array of valid themes names
  INDEX_VALID_THEMES_NAMES=0                                 # Index for VALID_THEMES_NAMES array
  THEMES_FOLDERS=("/home/$USER/.icons/" "/usr/share/icons/") # Icon theme folders

  while [ $INDEX_VALID_THEMES_NAMES -lt ${#VALID_THEMES_NAMES[@]} ]; do
    for THEME_FOLDER in ${THEMES_FOLDERS[@]}; do
      if [[ -d "${THEME_FOLDER}${VALID_THEMES_NAMES[$INDEX_VALID_THEMES_NAMES]}" ]]; then
        VALID_THEMES_FOLDERS+=("${THEME_FOLDER}${VALID_THEMES_NAMES[$INDEX_VALID_THEMES_NAMES]}/")
        
        # Detect icon name in this theme
        IFS=$'\n'
        THEME_FOLDERS=(`ls -1 -R ${THEME_FOLDER}${VALID_THEMES_NAMES[$INDEX_VALID_THEMES_NAMES]} | grep "/"`)
        THEME_FOLDERS=("${THEME_FOLDERS[@]}")
        for THEME_SUBFOLDER in ${THEME_FOLDERS[@]}; do
          # Filter by size: exact or scalable
          if [[ "${THEME_SUBFOLDER}" == *"${ICON_SIZE}x${ICON_SIZE}"* ]] || [[ "${THEME_SUBFOLDER}" == *"scalable"* ]]; then
            THEME_SUBFOLDER=${THEME_SUBFOLDER::-1} # Remove last char ":"
            THEME_ICONS=(`ls -1 ${THEME_SUBFOLDER}/*${ICON_NAME}* 2>/dev/null`)
            if [[ "$?" != "0" ]]; then
              THEME_ICONS=() # Add icons only if they exists
            fi
            VALID_ICONS_PATH+=(${THEME_ICONS[@]})
          fi
        done
        
        # Detect Inherits themes in index.theme
        IFS="="
        INHERITS_ROW=(`cat ${THEME_FOLDER}${VALID_THEMES_NAMES[${INDEX_VALID_THEMES_NAMES}]}/index.theme | grep -i "^Inherits"`)
        IFS=$OLD_IFS
        INHERITS_THEMES=(`echo ${INHERITS_ROW[1]} | tr ',' ' '`) # Look for the comma as delimiter
        
        # Add inherits themes to VALID_THEMES_NAMES
        for INHERITS_THEME in ${INHERITS_THEMES[@]}; do
          NEW_THEME=true
          for VALID_THEME_NAME in ${VALID_THEMES_NAMES[@]}; do
            if [[ "${INHERITS_THEME}" == "${VALID_THEME_NAME}" ]]; then
              NEW_THEME=false
            fi
          done
          if [[ $NEW_THEME == true ]]; then
            VALID_THEMES_NAMES+=("${INHERITS_THEME}")
          fi
        done
      fi
    done
    INDEX_VALID_THEMES_NAMES=$((INDEX_VALID_THEMES_NAMES+1))
  done
  
  # Search icon in fallback paths
  IFS=$RETURN
  SHARE_ICONS=(`ls -1 /usr/share/icons/* | grep -i "${ICON_NAME}"`)
  SHARE_PIXMAPS=(`ls -1 /usr/share/pixmaps/* | grep -i "${ICON_NAME}"`)
  IFS=$OLD_IFS
  VALID_ICONS_PATH+=(${SHARE_ICONS[@]})
  VALID_ICONS_PATH+=(${SHARE_PIXMAPS[@]})
  
  # Scan valid paths to retrieve icon
  BEST_INDEX=0
  BEST_SCORE=${#VALID_ICONS_PATH[0]}
  BEST_ICON=""
  for ((INDEX=0 ; INDEX < ${#VALID_ICONS_PATH[@]}; INDEX++)); do
    # File must be an image
    if [[ "`xdg-mime query filetype ${VALID_ICONS_PATH[$INDEX]} | grep "^image" -c`" == "1" ]]; then
      RESULT=`basename ${VALID_ICONS_PATH[$INDEX]}`      # Remove path
      RESULT=`echo ${RESULT} | cut -f 1 -d '.'`          # Remove extension
      EXTRA_CHARS=${RESULT//$ICON_NAME/}                 # Remove icon name
      DIRTY=${#EXTRA_CHARS}
      if [[ $DIRTY -lt $BEST_SCORE ]]; then
        BEST_SCORE=${DIRTY}
        BEST_INDEX=${INDEX}
        BEST_ICON="${RESULT}"
        if [[ $DIRTY == 0 ]]; then
          break
        fi
      fi
    fi
  done
  echo "${VALID_ICONS_PATH[$BEST_INDEX]}"
}

# Default language: en_US
TITLE="Screen brightness"
CHANGE_BRIGHTNESS="Change brightness."
EXIT="Close"
RESET_BRIGHTNESS_WITHIN="The brightness will reset within"
RESTORED_BRIGHTNESS="Brightness has been restored."
OK="OK"
APPLY="Apply"

# Import current language. If it fails, en_US will be used
case "`echo ${LANG} | cut -f1 -d ' ' | cut -f1 -d '.'`" in
  "it_IT")
    TITLE="Luminosità dello Schermo"
    CHANGE_BRIGHTNESS="Cambia la luminosità."
    EXIT="Chiudi"
    RESET_BRIGHTNESS_WITHIN="La luminosità si ripristinerà entro"
    RESTORED_BRIGHTNESS="La luminosità è stata ripristinata."
    OK="OK"
    APPLY="Applica"
    ;;
esac

main
